// <auto-generated />
using System;
using IdentityVerification.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IdentityVerification.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250828051411_RenameUniqueIndex_FieldCategories")]
    partial class RenameUniqueIndex_FieldCategories
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("IdentityVerification.Api.Entities.FieldCategory", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.HasKey("CategoryID");

                    b.HasIndex("CategoryName")
                        .IsUnique()
                        .HasDatabaseName("UX_FieldCategories_CategoryName");

                    b.ToTable("FieldCategories", t =>
                        {
                            t.HasCheckConstraint("CK_FieldCategory_Name_Allowed", "CategoryName IN ('Personal Information','Identity Document','Biometric Information')");
                        });
                });

            modelBuilder.Entity("IdentityVerification.Api.Entities.FormField", b =>
                {
                    b.Property<int>("FieldID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("FieldID"));

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("ExpectedValue")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("FieldType")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("SizeLimit")
                        .HasColumnType("int");

                    b.HasKey("FieldID");

                    b.HasIndex("CategoryID");

                    b.ToTable("FormFields");
                });

            modelBuilder.Entity("IdentityVerification.Api.Entities.ResponseSubmission", b =>
                {
                    b.Property<int>("SubmissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SubmissionID"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("TemplateID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("SubmissionID");

                    b.HasIndex("TemplateID");

                    b.HasIndex("UserID");

                    b.ToTable("ResponseSubmissions");
                });

            modelBuilder.Entity("IdentityVerification.Api.Entities.Template", b =>
                {
                    b.Property<int>("TemplateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TemplateID"));

                    b.Property<bool>("AllowCameraCapture")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowDocumentUpload")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("TemplateID");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("IdentityVerification.Api.Entities.TemplateFormField", b =>
                {
                    b.Property<int>("TemplateFormFieldID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TemplateFormFieldID"));

                    b.Property<int>("FieldID")
                        .HasColumnType("int");

                    b.Property<int>("FieldOrder")
                        .HasColumnType("int");

                    b.Property<string>("HelpText")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<bool>("IsRequiredOverride")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("TemplateID")
                        .HasColumnType("int");

                    b.HasKey("TemplateFormFieldID");

                    b.HasIndex("FieldID");

                    b.HasIndex("TemplateID");

                    b.ToTable("TemplateFormFields");
                });

            modelBuilder.Entity("IdentityVerification.Api.Entities.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Phone")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.HasKey("UserID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("IdentityVerification.Api.Entities.UserResponse", b =>
                {
                    b.Property<int>("ResponseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ResponseID"));

                    b.Property<int>("FieldID")
                        .HasColumnType("int");

                    b.Property<int>("SubmissionID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ValueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ValueFile")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<decimal?>("ValueNumber")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("ValueText")
                        .HasColumnType("longtext");

                    b.HasKey("ResponseID");

                    b.HasIndex("FieldID");

                    b.HasIndex("SubmissionID");

                    b.ToTable("UserResponses", t =>
                        {
                            t.HasCheckConstraint("CK_UserResponse_ExactlyOneValue", "( (CASE WHEN ValueText IS NOT NULL THEN 1 ELSE 0 END) +   (CASE WHEN ValueNumber IS NOT NULL THEN 1 ELSE 0 END) +   (CASE WHEN ValueDate IS NOT NULL THEN 1 ELSE 0 END) +   (CASE WHEN ValueFile IS NOT NULL THEN 1 ELSE 0 END) ) = 1");
                        });
                });

            modelBuilder.Entity("IdentityVerification.Api.Entities.FormField", b =>
                {
                    b.HasOne("IdentityVerification.Api.Entities.FieldCategory", "Category")
                        .WithMany("FormFields")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("IdentityVerification.Api.Entities.ResponseSubmission", b =>
                {
                    b.HasOne("IdentityVerification.Api.Entities.Template", "Template")
                        .WithMany("ResponseSubmissions")
                        .HasForeignKey("TemplateID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IdentityVerification.Api.Entities.User", "User")
                        .WithMany("ResponseSubmissions")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Template");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdentityVerification.Api.Entities.Template", b =>
                {
                    b.HasOne("IdentityVerification.Api.Entities.User", "CreatedByUser")
                        .WithMany("CreatedTemplates")
                        .HasForeignKey("CreatedBy")
                        .HasPrincipalKey("Email")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("IdentityVerification.Api.Entities.TemplateFormField", b =>
                {
                    b.HasOne("IdentityVerification.Api.Entities.FormField", "FormField")
                        .WithMany("TemplateFormFields")
                        .HasForeignKey("FieldID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IdentityVerification.Api.Entities.Template", "Template")
                        .WithMany("TemplateFormFields")
                        .HasForeignKey("TemplateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormField");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("IdentityVerification.Api.Entities.UserResponse", b =>
                {
                    b.HasOne("IdentityVerification.Api.Entities.FormField", "Field")
                        .WithMany("UserResponses")
                        .HasForeignKey("FieldID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IdentityVerification.Api.Entities.ResponseSubmission", "Submission")
                        .WithMany("UserResponses")
                        .HasForeignKey("SubmissionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("IdentityVerification.Api.Entities.FieldCategory", b =>
                {
                    b.Navigation("FormFields");
                });

            modelBuilder.Entity("IdentityVerification.Api.Entities.FormField", b =>
                {
                    b.Navigation("TemplateFormFields");

                    b.Navigation("UserResponses");
                });

            modelBuilder.Entity("IdentityVerification.Api.Entities.ResponseSubmission", b =>
                {
                    b.Navigation("UserResponses");
                });

            modelBuilder.Entity("IdentityVerification.Api.Entities.Template", b =>
                {
                    b.Navigation("ResponseSubmissions");

                    b.Navigation("TemplateFormFields");
                });

            modelBuilder.Entity("IdentityVerification.Api.Entities.User", b =>
                {
                    b.Navigation("CreatedTemplates");

                    b.Navigation("ResponseSubmissions");
                });
#pragma warning restore 612, 618
        }
    }
}
